From 2c90d5bbfb211207b9ffd3f348185fdb3ee59308 Mon Sep 17 00:00:00 2001
From: chih-chien Hsiao <daniel13520cs@gmail.com>
Date: Wed, 4 Apr 2018 14:57:36 -0400
Subject: [PATCH 12/13] fixed counter, getTotalTickets()

---
 partner.txt |  1 +
 proc.c      | 26 ++++++++++++--------------
 2 files changed, 13 insertions(+), 14 deletions(-)
 create mode 100644 partner.txt

diff --git a/partner.txt b/partner.txt
new file mode 100644
index 0000000..610d081
--- /dev/null
+++ b/partner.txt
@@ -0,0 +1 @@
+my partner: Andersen Chang, N15072909, ac7244
diff --git a/proc.c b/proc.c
index 0a9e0b0..3005dcb 100644
--- a/proc.c
+++ b/proc.c
@@ -267,7 +267,9 @@ getTotalTickets(void)
   int tickets = 0;
   struct proc* p;
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    tickets += p->ticket;
+    if(p->state == RUNNABLE){
+      tickets += p->ticket;
+    }
   }
   return tickets;
 }
@@ -299,19 +301,14 @@ scheduler(void)
     //init
     int counter = 0;
     int totalTickets = 0;
-    int winner = 0;
+    long winner = 0;
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      totalTickets = getTotalTickets();
-      if( p == ptable.proc ){
-        winner = random_at_most(totalTickets);
-      }
       if(p->state != RUNNABLE)
         continue;
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us. implemented lottery algorithm
-      //cprintf("winner = %d\n", winner);
-      counter = totalTickets + p->ticket;
+      counter += p->ticket;
       if(winner < counter){
         foundproc = 1;
         proc = p;
@@ -319,14 +316,15 @@ scheduler(void)
         p->state = RUNNING;
         swtch(&cpu->scheduler, proc->context);
         switchkvm();
-	//update
-	counter = 0;
+        //reset variables
+        totalTickets = getTotalTickets();
+        winner = random_at_most(totalTickets);
+        counter = 0;
 	p = ptable.proc;
-	totalTickets = 0;
+        // Process is done running for now.
+        // It should have changed its p->state before coming back.
+        proc = 0;
       }
-      // Process is done running for now.
-      // It should have changed its p->state before coming back.
-      proc = 0;
     }
     release(&ptable.lock);
 
-- 
1.9.1

