From e8376717510e23dfa604756dd00dabcb79d7b8ba Mon Sep 17 00:00:00 2001
From: Brendan Dolan-Gavitt <brendandg@gatech.edu>
Date: Wed, 7 Oct 2015 17:40:47 -0400
Subject: [PATCH 01/13] Benchmarks for scheduler

---
 Makefile    |   1 +
 hackbench.c | 324 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 printf.c    |  17 ++++
 proc.c      |   1 -
 syscall.c   |   2 +
 syscall.h   |   1 +
 sysproc.c   |   9 ++
 user.h      |   1 +
 usys.S      |   1 +
 x86.h       |   7 ++
 10 files changed, 363 insertions(+), 1 deletion(-)
 create mode 100644 hackbench.c

diff --git a/Makefile b/Makefile
index b4fd9a2..030d4ac 100644
--- a/Makefile
+++ b/Makefile
@@ -172,6 +172,7 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_hackbench\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
diff --git a/hackbench.c b/hackbench.c
new file mode 100644
index 0000000..e33452a
--- /dev/null
+++ b/hackbench.c
@@ -0,0 +1,324 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "x86.h"
+
+/* Test groups of 20 processes spraying to 20 receivers */
+//#include <stdio.h>
+//#include <string.h>
+//#include <errno.h>
+//#include <sys/types.h>
+//#include <sys/socket.h>
+//#include <sys/wait.h>
+//#include <sys/time.h>
+//#include <sys/poll.h>
+
+/* HOW TO Piping ???:
+   send:
+   1. fdout = dup(1)
+   2. close(1)
+   recv:
+   1. fdin = dup(0)
+   2. close(0)
+   pipe:
+   pipe(fdin, fdout)
+ */
+
+#define DATASIZE 100
+
+#define FREE 0
+#define POLLIN 1
+
+#define SENDER 1
+#define RECEIVER 2
+
+#define STDIN  0
+#define STDOUT 1
+#define STDERR 2
+
+#define TIMEOUT 1
+
+#define TRUE 1
+#define FALSE 0
+#define DEBUG FALSE
+
+#define NUM_FDS 8
+#define NUM_GROUPS 2
+
+static unsigned int loops = 100;
+static int use_pipes = 1; // Use Pipe mode
+//static int pollfd = 0; // 0: not used, 1: used
+//static unsigned int *pollfd[512];
+static int fd_count = 0;
+
+
+/* Data structure descripbing a polling request. */
+
+struct pollfd{
+  int fd;              /* File descriptor to poll. */
+  short int events;    /* Types of events poller cares about. */
+  short int revents;   /* Types of events that actually occurred. */
+}pollfd[512];
+
+
+
+static void barf(const char *msg)
+{
+  printf(STDOUT, "(Error: %s)\n", msg);
+  exit();
+}
+
+static void fdpair(int fds[2])
+{
+  if (use_pipes) {
+    // TODO: Implement myPipe
+    //    pipe(fds[0], fds[1]);
+    if (pipe(fds) == 0)
+      fd_count += 2;
+      return;
+  } else {
+    // This mode would not run correctly in xv6
+    //if (socketpair(AF_UNIX, SOCK_STREAM, 0, fds) == 0)
+    //  return;
+    barf("Socket mode is running. (error)\n");
+  }
+  //barf("Creating fdpair");
+}
+
+static void checkEvents(int id, int event, int caller, char *msg){
+  if(event == POLLIN){
+    if(caller == SENDER){
+      printf(STDOUT, "send[%d] is %s ... (pollfd[%d].events = POLLIN)\n", id, msg, id);
+    }else if(caller == RECEIVER){
+      printf(STDOUT, "recv[%d] is %s ... (pollfd[%d].events = POLLIN)\n", id, msg, id);
+    }else{
+      barf("checkEvents");
+    }
+  }else if(event == FREE){
+    if(caller == SENDER){
+      printf(STDOUT, "send[%d] is %s ... (pollfd[%d].events = FREE)\n", id, msg, id);
+    }else if(caller == RECEIVER){
+      printf(STDOUT, "recv[%d] is %s ... (pollfd[%d].events = FREE)\n", id, msg, id);
+    }else{
+      barf("checkEvents");
+    }
+  }else{
+    barf("checkEvents");
+  }	      
+}
+
+/* Block until we're ready to go */
+static void ready(int ready_out, int wakefd, int id, int caller)
+{
+  char dummy;
+  dummy = 'a';
+  // TODO: Implement myPoll function
+  pollfd[id].fd = wakefd;
+  if(caller == RECEIVER) pollfd[id].events = POLLIN;
+
+  /* Tell them we're ready. */
+  if (write(ready_out, &dummy, 1) != 1)
+    barf("CLIENT: ready write");
+
+  /* Wait for "GO" signal */
+  //TODO: Polling should be re-implemented for xv6.
+  //if (poll(&pollfd, 1, -1) != 1)
+  //        barf("poll");
+  if(caller == SENDER){
+    if(DEBUG) checkEvents(id, pollfd[id].events, caller, "waiting");
+    while(pollfd[id].events == POLLIN);
+    if(DEBUG) checkEvents(id, pollfd[id].events, caller, "ready");
+  }else if(caller == RECEIVER){
+    pollfd[id].events = FREE;
+    //while(getticks() < TIMEOUT);
+    if(DEBUG) checkEvents(id, pollfd[id].events, caller, "ready");
+  }else{
+    barf("Failed being ready.");
+  }
+}
+
+
+
+/* Sender sprays loops messages down each file descriptor */
+static void sender(unsigned int num_fds,
+                   unsigned int out_fd[num_fds],
+                   int ready_out,
+                   int wakefd,
+		   int id)
+{
+  char data[DATASIZE];
+  int k;
+  for(k=0; k<DATASIZE-1 ; k++){
+    data[k] = 'b';
+  }
+  data[k] = '\0';
+  
+  unsigned int i, j;
+
+  //TODO: Fix Me?
+  ready(ready_out, wakefd, id, SENDER);
+
+  /* Now pump to every receiver. */
+  for (i = 0; i < loops; i++) {
+    for (j = 0; j < num_fds; j++) {
+      int ret, done = 0;
+
+    again:
+      ret = write(out_fd[j], data + done, sizeof(data)-done);
+      if(DEBUG) printf(STDOUT, "send[%d]: ret = %d. (%d/%d/%d)\n", id, ret, i, num_fds, loops);
+      if (ret < 0)
+	barf("SENDER: write");
+      done += ret;
+      if (done < sizeof(data))
+	goto again;
+      if(DEBUG) printf(STDOUT, "send[%d]'s task has done. (%d/%d/%d)\n", id, ret, i, num_fds, loops);
+    }
+  }
+}
+
+/* One receiver per fd */
+static void receiver(unsigned int num_packets,
+                     int in_fd,
+                     int ready_out,
+                     int wakefd,
+		     int id)
+{
+  unsigned int i;
+
+  /* Wait for start... */
+  ready(ready_out, wakefd, id, RECEIVER);
+
+  /* Receive them all */
+  for (i = 0; i < num_packets; i++) {
+    char data[DATASIZE];
+    int ret, done = 0;
+
+  again:
+    ret = read(in_fd, data + done, DATASIZE - done);
+    if(DEBUG) printf(STDOUT, "recv[%d]: ret = %d. (%d/%d)\n", id, ret, i, num_packets);
+    if (ret < 0)
+      barf("SERVER: read");
+    done += ret;
+    if (done < DATASIZE){
+      goto again;
+    }
+    if(DEBUG) printf(STDOUT, "recv[%d]'s task has done. (%d/%d)\n", id, i, num_packets);
+  }
+}
+
+/* One group of senders and receivers */
+static unsigned int group(unsigned int num_fds,
+                          int ready_out,
+                          int wakefd)
+{
+  unsigned int i;
+  unsigned int out_fds[num_fds];
+
+  for (i = 0; i < num_fds; i++) {
+    int fds[2];
+
+    /* Create the pipe between client and server */
+    fdpair(fds);
+
+    /* Fork the receiver. */
+    switch (fork()) {
+    case -1: barf("fork()");
+    case 0:
+      close(fds[1]);
+      fd_count++;
+      receiver(num_fds*loops, fds[0], ready_out, wakefd, i);
+      exit();
+    }
+
+    out_fds[i] = fds[1];
+    close(fds[0]);
+  }
+
+  /* Now we have all the fds, fork the senders */
+  for (i = 0; i < num_fds; i++) {
+    switch (fork()) {
+    case -1: barf("fork()");
+    case 0:
+      fd_count += 2;
+      sender(num_fds, out_fds, ready_out, wakefd, i);
+      exit();
+    }
+  }
+
+  /* Close the fds we have left */
+  for (i = 0; i < num_fds; i++)
+    close(out_fds[i]);
+
+  /* Reap number of children to reap */
+  return num_fds * 2;
+}
+
+int main(int argc, char *argv[])
+{
+  unsigned int i, num_groups, total_children;
+  //struct timeval start, stop, diff;
+  unsigned long long start=0, stop=0, diff=0;
+  // NOTE: More than 8 causes error due to num of fds.
+  unsigned int num_fds = NUM_FDS;  // Original this is 20
+  int readyfds[2], wakefds[2];
+  char dummy;
+
+  /*
+    if (argv[1] && strcmp(argv[1], "-pipe") == 0) {
+    use_pipes = 1;
+    argc--;
+    argv++;
+    }
+  */
+  use_pipes = 1;
+  argc--;
+  argv++;
+
+  //if (argc != 2 || (num_groups = atoi(argv[1])) == 0)
+  //        barf("Usage: hackbench [-pipe] <num groups>\n");
+
+  // NOTE: More than 3 causes error due to num of processes.
+  num_groups = NUM_GROUPS; // TODO: This may seriously be considered.
+
+  fdpair(readyfds);
+  fdpair(wakefds);
+
+  total_children = 0;
+  for (i = 0; i < num_groups; i++)
+    total_children += group(num_fds, readyfds[1], wakefds[0]);
+
+  /* Wait for everyone to be ready */
+  for (i = 0; i < total_children; i++)
+    if (read(readyfds[0], &dummy, 1) != 1)
+      barf("Reading for readyfds");
+
+  //gettimeofday(&start, NULL);
+  start = rdtsc();
+  if(DEBUG) printf(STDOUT, "Start Watching Time ...\n");
+  
+
+  /* Kick them off */
+  if (write(wakefds[1], &dummy, 1) != 1)
+    barf("Writing to start them");
+
+  /* Reap them all */
+  //TODO: Fix different specifications between xv6 and Linux
+  for (i = 0; i < total_children; i++) {
+    //int status;
+    //wait(&status); // TODO: Too Many Arguments???
+    wait(); // Waiting for that all child's tasks finish.
+    // TODO: What's WIFEXITED ???
+    //if (!WIFEXITED(status))
+    //  exit();
+  }
+  
+  stop = rdtsc();
+  if(DEBUG) printf(STDOUT, "Stop Watching Time ...\n");
+  diff = stop - start;
+
+  /* Print time... */
+  printf(STDOUT, "Time: 0x%l [ticks]\n", diff);
+  if(DEBUG) printf(STDOUT, "fd_count = %d\n", fd_count);
+  exit();
+}
+
diff --git a/printf.c b/printf.c
index 9972b45..7a69654 100644
--- a/printf.c
+++ b/printf.c
@@ -35,7 +35,19 @@ printint(int fd, int xx, int base, int sgn)
     putc(fd, buf[i]);
 }
 
+static void
+printlong(int fd, unsigned long long xx, int base, int sgn)
+{
+    // Force hexadecimal
+    uint upper, lower;
+    upper = xx >> 32;
+    lower = xx & 0xffffffff;
+    if(upper) printint(fd, upper, 16, 0);
+    printint(fd, lower, 16, 0);
+}
+
 // Print to the given fd. Only understands %d, %x, %p, %s.
+// bdg 10/05/2015: Add %l
 void
 printf(int fd, char *fmt, ...)
 {
@@ -57,6 +69,11 @@ printf(int fd, char *fmt, ...)
       if(c == 'd'){
         printint(fd, *ap, 10, 1);
         ap++;
+      } else if(c == 'l') {
+        printlong(fd, *(unsigned long long *)ap, 10, 0);
+        // long longs take up 2 argument slots
+        ap++;
+        ap++;
       } else if(c == 'x' || c == 'p'){
         printint(fd, *ap, 16, 0);
         ap++;
diff --git a/proc.c b/proc.c
index fee4e95..334cd2e 100644
--- a/proc.c
+++ b/proc.c
@@ -273,7 +273,6 @@ scheduler(void)
     sti();
 
     if (!foundproc) hlt();
-
     foundproc = 0;
 
     // Loop over process table looking for process to run.
diff --git a/syscall.c b/syscall.c
index 799ebc2..0e06ad4 100644
--- a/syscall.c
+++ b/syscall.c
@@ -98,6 +98,7 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_gettime(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -121,6 +122,7 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_gettime] sys_gettime,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..6d6c224 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_gettime 22
diff --git a/sysproc.c b/sysproc.c
index 027a5e5..14603e1 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -89,3 +89,12 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+int
+sys_gettime(void) {
+    unsigned long long *n;
+    if (argptr(0, (char **)&n, 8) < 0)
+        return -1;
+    *n = rdtsc();
+    return 0;
+}
diff --git a/user.h b/user.h
index f45b8d5..a708aed 100644
--- a/user.h
+++ b/user.h
@@ -23,6 +23,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+void gettime(unsigned long long *);
 
 // ulib.c
 int stat(char*, struct stat*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..e556d66 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,4 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(gettime)
diff --git a/x86.h b/x86.h
index 7d14145..6a5bba3 100644
--- a/x86.h
+++ b/x86.h
@@ -123,6 +123,13 @@ hlt(void)
   asm volatile("hlt");
 }
 
+static inline unsigned long long rdtsc(void)
+{
+    unsigned long long ret;
+    asm volatile ( "rdtsc" : "=A"(ret) );
+    return ret;
+}
+
 static inline uint
 xchg(volatile uint *addr, uint newval)
 {
-- 
1.9.1

